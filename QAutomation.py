#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#    Jul 26, 2022 12:07:08 PM IST  platform: Windows NT
import glob
import subprocess
import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40'  # X11 color: #666666
_ana1color = '#c3c3c3'  # Closest X11 color: 'gray76'
_ana2color = 'beige'  # X11 color: #f5f5dc
_tabfg1 = 'black'
_tabfg2 = 'black'
_tabbg1 = 'grey75'
_tabbg2 = 'grey89'
_bgmode = 'light'

_style_code_ran = 0


def close():
    root.destroy()


def test_option():
    try:

        for x in glob.glob("E:\\ajin abhi\\" + Scrolledlistbox1.get(ANCHOR) + "\\" + Scrolledlistbox2.get(ANCHOR)):
            os.path.basename(x)

            if os.path.basename(x) == Scrolledlistbox2.get(ANCHOR):
                subprocess.call([x])
                Label7 = tk.Label(Frame1)
                Label7.place(relx=0.020, rely=0.897, height=24, width=77)
                Label7.configure(activebackground="beige")
                Label7.configure(activeforeground="black")
                Label7.configure(background="#ffffff")
                Label7.configure(compound='left')
                Label7.configure(disabledforeground="#a3a3a3")
                Label7.configure(foreground="#00FF00")
                Label7.configure(font="-family {Segoe UI} -size 9")
                Label7.configure(highlightcolor="black")
                Label7.configure(pady="0")
                Label7.configure(text='''Successful''')
                break
    except:
        Label8 = tk.Label(Frame1)
        Label8.place(relx=0.020, rely=0.898, height=24, width=88)
        Label8.configure(activebackground="beige")
        Label8.configure(activeforeground="black")
        Label8.configure(background="#ffffff")
        Label8.configure(compound='left')
        Label8.configure(disabledforeground="#a3a3a3")
        Label8.configure(foreground="#FF0000")
        Label8.configure(font="-family {Segoe UI} -size 9")
        Label8.configure(highlightcolor="black")
        Label8.configure(pady="0")
        Label8.configure(text='''Failed''')


def option_changed():
    count = 0
    for x in glob.glob("E:\\ajin abhi\\" + Scrolledlistbox1.get(ANCHOR) + "\\*.bat"):
        Scrolledlistbox2.insert(count, os.path.basename(x))


def _style_code():
    global _style_code_ran
    if _style_code_ran:
        return
    style = ttk.Style()
    if sys.platform == "win32":
        style.theme_use('winnative')
    style.configure('.', background=_bgcolor)
    style.configure('.', foreground=_fgcolor)
    style.configure('.', font='TkDefaultFont')
    style.map('.', background=
    [('selected', _compcolor), ('active', _ana2color)])
    if _bgmode == 'dark':
        style.map('.', foreground=
        [('selected', 'white'), ('active', 'white')])
    else:
        style.map('.', foreground=
        [('selected', 'black'), ('active', 'black')])
    style.configure('Vertical.TScrollbar', background=_bgcolor,
                    arrowcolor=_fgcolor)
    style.configure('Horizontal.TScrollbar', background=_bgcolor,
                    arrowcolor=_fgcolor)
    _style_code_ran = 1


def __init__(top=None):
    '''This class configures and populates the toplevel window.
       top is the toplevel containing window.'''
    global Scrolledlistbox1, Scrolledlistbox2, Frame1
    top.geometry("405x377+855+185")
    top.minsize(120, 1)
    top.maxsize(1924, 1061)
    top.resizable(1, 1)
    top.title("QAutomation")
    top.configure(background="#ffffff")
    top.configure(highlightbackground="#d9d9d9")
    top.configure(highlightcolor="black")

    top = top

    Frame1 = tk.Frame(top)
    Frame1.place(relx=0.025, rely=0.027, relheight=0.918
                 , relwidth=0.958)
    Frame1.configure(relief='groove')
    Frame1.configure(borderwidth="2")
    Frame1.configure(relief="groove")
    Frame1.configure(background="#ffffff")
    Frame1.configure(highlightbackground="#d9d9d9")
    Frame1.configure(highlightcolor="black")

    Label1 = tk.Label(Frame1)
    Label1.place(relx=0.103, rely=0.058, height=57, width=300)
    Label1.configure(activebackground="#f9f9f9")
    Label1.configure(anchor='w')
    Label1.configure(background="#ffffff")
    Label1.configure(compound='left')
    Label1.configure(disabledforeground="#a3a3a3")
    Label1.configure(font="-family {Segoe UI} -size 28 -weight bold")
    Label1.configure(foreground="#009595")
    Label1.configure(highlightbackground="#d9d9d9")
    Label1.configure(highlightcolor="black")
    Label1.configure(text='''Legacy Guardian''')

    Label2 = tk.Label(Frame1)
    Label2.place(relx=0.021, rely=0.324, height=27, width=113)
    Label2.configure(activebackground="#f9f9f9")
    Label2.configure(anchor='w')
    Label2.configure(background="#ffffff")
    Label2.configure(compound='left')
    Label2.configure(disabledforeground="#a3a3a3")
    Label2.configure(font="-family {Segoe UI} -size 9 -weight bold")
    Label2.configure(foreground="#000000")
    Label2.configure(highlightbackground="#d9d9d9")
    Label2.configure(highlightcolor="black")
    Label2.configure(text='''Application Name''')

    Label3 = tk.Label(Frame1)
    Label3.place(relx=0.044, rely=0.624, height=27, width=104)
    Label3.configure(activebackground="#f9f9f9")
    Label3.configure(anchor='w')
    Label3.configure(background="#ffffff")
    Label3.configure(compound='left')
    Label3.configure(disabledforeground="#a3a3a3")
    Label3.configure(font="-family {Segoe UI} -size 9 -weight bold")
    Label3.configure(foreground="#000000")
    Label3.configure(highlightbackground="#d9d9d9")
    Label3.configure(highlightcolor="black")
    Label3.configure(text='''Test Case Name''')

    Button1 = tk.Button(Frame1)
    Button1.place(relx=0.343, rely=0.896, height=24, width=67)
    Button1.configure(activebackground="beige")
    Button1.configure(activeforeground="black")
    Button1.configure(background="#00cccc")
    Button1.configure(compound='left')
    Button1.configure(disabledforeground="#a3a3a3")
    Button1.configure(foreground="#000000")
    Button1.configure(highlightbackground="#d9d9d9")
    Button1.configure(highlightcolor="black")
    Button1.configure(pady="0")
    Button1.configure(text='''Execute''', command=test_option)

    Button2 = tk.Button(Frame1)
    Button2.place(relx=0.557, rely=0.896, height=24, width=67)
    Button2.configure(activebackground="beige")
    Button2.configure(activeforeground="black")
    Button2.configure(background="#00cccc")
    Button2.configure(compound='left')
    Button2.configure(disabledforeground="#a3a3a3")
    Button2.configure(foreground="#000000")
    Button2.configure(highlightbackground="#d9d9d9")
    Button2.configure(highlightcolor="black")
    Button2.configure(pady="0")
    Button2.configure(text='''Cancel''', command=close)

    Label4 = tk.Label(Frame1)
    Label4.place(relx=0.768, rely=0.029, height=27, width=87)
    Label4.configure(activebackground="#f9f9f9")
    Label4.configure(anchor='w')
    Label4.configure(background="#ffffff")
    Label4.configure(compound='left')
    Label4.configure(disabledforeground="#a3a3a3")
    Label4.configure(font="-family {Segoe UI} -size 7")
    Label4.configure(foreground="#00cece")
    Label4.configure(highlightbackground="#d9d9d9")
    Label4.configure(highlightcolor="black")
    Label4.configure(text='''QAutomation v1.1''')

    Button3 = tk.Button(Frame1)
    Button3.place(relx=0.799, rely=0.462, height=24, width=67)
    Button3.configure(activebackground="beige")
    Button3.configure(activeforeground="black")
    Button3.configure(background="#00cccc")
    Button3.configure(compound='left')
    Button3.configure(disabledforeground="#a3a3a3")
    Button3.configure(foreground="#000000")
    Button3.configure(highlightbackground="#d9d9d9")
    Button3.configure(highlightcolor="black")
    Button3.configure(pady="0")
    Button3.configure(text='''Select App''', command=option_changed)

    _style_code()

    Scrolledlistbox1 = ScrolledListBox(Frame1)
    count = 0
    for x in glob.glob("E:\\ajin abhi\\*"):
        Scrolledlistbox1.insert(count, os.path.basename(x))

    Scrolledlistbox1.place(relx=0.309, rely=0.318, relheight=0.22
                           , relwidth=0.472)
    Scrolledlistbox1.configure(background="white")
    Scrolledlistbox1.configure(cursor="xterm")
    Scrolledlistbox1.configure(disabledforeground="#a3a3a3")
    Scrolledlistbox1.configure(font="-family {Segoe UI} -size 9")
    Scrolledlistbox1.configure(foreground="black")
    Scrolledlistbox1.configure(highlightbackground="#d9d9d9")
    Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
    Scrolledlistbox1.configure(selectbackground="#c4c4c4")
    Scrolledlistbox1.configure(selectforeground="black")

    Scrolledlistbox2 = ScrolledListBox(Frame1)
    Scrolledlistbox2.place(relx=0.309, rely=0.578, relheight=0.243
                           , relwidth=0.472)
    Scrolledlistbox2.configure(background="white")
    Scrolledlistbox2.configure(cursor="xterm")
    Scrolledlistbox2.configure(disabledforeground="#a3a3a3")
    Scrolledlistbox2.configure(font="-family {Segoe UI} -size 9")
    Scrolledlistbox2.configure(foreground="black")
    Scrolledlistbox2.configure(highlightbackground="#d9d9d9")
    Scrolledlistbox2.configure(highlightcolor="#d9d9d9")
    Scrolledlistbox2.configure(selectbackground="#c4c4c4")
    Scrolledlistbox2.configure(selectforeground="black")


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        global vsb
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

    def size_(self):
        sz = tk.Listbox.size(self)
        return sz


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


def start_up():
    global root
    root = tk.Tk()
    root.protocol('WM_DELETE_WINDOW', root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = __init__(_top1)
    root.mainloop()


if __name__ == '__main__':
    start_up()
